/*
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Run `npx ets` or `yarn ets` to regenerate this file.
 * Source: ./detectIntent.ets
 */
/* eslint-disable */

interface Props {
  model: string;
}

export default function (props: Props): string {
  let result = "";
  result +=
    '\nBased on my query + previous history, determine the type of request:\n- feature/user discussion that a product manager is better suited for\n  e.g.: "how should this feature work", "what should the ux be", "should i add a button"\n  type = PRODUCT, message = switching to product assistant\n- requires extra context or taking action (from the file system, user, or internet):\n  e.g.: "add this feature", "fix this bug", "where is the Sidebar code"\n  type = PLANNER, message = let the user know planning is happening\n- simple question that can be answered with only the context provided\n  e.g. "how do i sort strings", "what does the Foo method do"\n  ';
  result += preserveIndentation(
    props.model != "4"
      ? `if requires code generation or other complex reasoning, type = COMPLEX_ANSWER, message = thinking...
  else, `
      : "",
    "  "
  );
  result +=
    'type = DIRECT_ANSWER, message = answer to the question or request with code snippets if relevant\n- if none of these, type = DIRECT_ANSWER, message = ask the user for clarification and tell them to try again\n\nALWAYS Return in the format "<type>: <message to the user>", e.g. DIRECT_ANSWER: the answer is 42\n\nAnalyze and categorize my query:';
  return result;
}

function preserveIndentation(text: string, indentation: string): string {
  return text
    .split("\n")
    .map((line, idx) => (idx === 0 ? line : indentation + line))
    .join("\n");
}
